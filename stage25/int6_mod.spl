alias userSP R0;
userSP=SP;
[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+9]=5;
[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+13]=SP;
SP=[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+11]*512-1;

alias fileDesc R1;
fileDesc=[[PTBR+2*((userSP-4)/512)]*512+(userSP-4)%512];
alias physicalAddrRetVal R2;
physicalAddrRetVal=[PTBR+2*((userSP-1)/512)]*512+(userSP-1)%512;
[physicalAddrRetVal]=0;
alias process_entry R3;
process_entry=PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16;
if(fileDesc==-1) then
    //read from terminal;
    alias word_addr R4;
    word_addr=[[PTBR+2*((userSP-3)/512)]*512+(userSP-3)%512];
    multipush(R0,R1,R2,R3,R4);
    R1=TERMINAL_READ;
    R2=[SYSTEM_STATUS_TABLE+1];
    R3=R4;
    call MOD_4;
    multipop(R0,R1,R2,R3,R4);
else
    if(fileDesc<0 || fileDesc>7) then
        [physicalAddrRetVal]=-1;
        [process_entry+9]=0;
        SP=[process_entry+13];
        ireturn;
    endif;
    alias resource_table R4;
    resource_table=[process_entry+11]*512+496;
    alias openfileIndex R5;
    openfileIndex=[resource_table+fileDesc*2+1];
    alias inode_index R6;
    inode_index=[OPEN_FILE_TABLE+openfileIndex*4];
    multipush(R0,R1,R2,R3,R4,R5,R6,R7);
    R1=ACQUIRE_INODE;
    R2=inode_index;
    R3=[SYSTEM_STATUS_TABLE+1];
    call MOD_0;
    R10=R0;
    multipop(R0,R1,R2,R3,R4,R5,R6,R7);
    if(R10==-1) then
        [physicalAddrRetVal]=-1;
        [process_entry+9]=0;
        SP=[process_entry+13];
        ireturn;
    endif;
    alias lseek_pos R7;
    lseek_pos=OPEN_FILE_TABLE+openfileIndex*4+2;
    alias membuff_address R8;
    membuff_address=[[PTBR+2*((userSP-3)/512)]*512+(userSP-3)%512];
    if(inode_index==INODE_ROOT) then
        if([lseek_pos]==480) then
           multipush(R0,R1,R2,R3,R4,R5,R6,R7,R8);
           R1=RELEASE_INODE;
           R2=inode_index;
           R3=[SYSTEM_STATUS_TABLE+1];
           call MOD_0;
           multipop(R0,R1,R2,R3,R4,R5,R6,R7,R8);
           [physicalAddrRetVal]=-2;
           [process_entry+9]=0;
           SP=[process_entry+13];
           ireturn;
        endif;
        [[PTBR+2*(membuff_address/512)]*512+membuff_address%512]=[ROOT_FILE+[lseek_pos]];
        
        multipush(R0,R1,R2,R3,R4,R5,R6,R7,R8);
        R1=RELEASE_INODE;
        R2=inode_index;
        R3=[SYSTEM_STATUS_TABLE+1];
        call MOD_0;
        multipop(R0,R1,R2,R3,R4,R5,R6,R7,R8);

        [lseek_pos]=[lseek_pos]+1;
        [physicalAddrRetVal]=0;
        [process_entry+9]=0;
        SP=[process_entry+13];
        ireturn;
    else
        if([lseek_pos]==[INODE_TABLE+inode_index*16+2]) then
           multipush(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9);
           R1=RELEASE_INODE;
           R2=inode_index;
           R3=[SYSTEM_STATUS_TABLE+1];
           call MOD_0;
           multipop(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9);
           [physicalAddrRetVal]=-2;
           [process_entry+9]=0;
           SP=[process_entry+13];
           ireturn;
        endif;    
        alias block_index R9;
        alias offset R11;
        block_index=[lseek_pos]/512;
        offset=[lseek_pos]%512;
        alias disk_block_num R12;
        disk_block_num=[INODE_TABLE+inode_index*16+block_index+8];
        
        //call Buffered READ;
        multipush(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,R12);
        R1=BUFFERED_READ;
        R2=disk_block_num;
        R3=offset;
        R4=membuff_address;
        call MOD_3;
        multipop(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,R12);

        [lseek_pos]=[lseek_pos]+1;
        multipush(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,R12);
    
        R1=RELEASE_INODE;
        R2=inode_index;
        R3=[SYSTEM_STATUS_TABLE+1];
        call MOD_0;
        multipop(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,R12);
    endif;
endif;
[physicalAddrRetVal]=0;
[process_entry+9]=0;
SP=[process_entry+13];
ireturn;


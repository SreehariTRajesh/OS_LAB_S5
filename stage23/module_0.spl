alias fNum R1;
alias currPID R2;
if(fNum==ACQUIRE_TERMINAL) then
    while([TERMINAL_STATUS_TABLE]==1) do
        [PROCESS_TABLE+currPID*16+4]=WAIT_TERMINAL;
        backup;
        call MOD_5;
        restore;
    endwhile;
    [TERMINAL_STATUS_TABLE]=1;
    [TERMINAL_STATUS_TABLE+1]=currPID;
    return;
endif;

if(fNum==RELEASE_TERMINAL) then
    if(currPID!=[TERMINAL_STATUS_TABLE+1]) then
        R0=-1;
        return;
    else
        [TERMINAL_STATUS_TABLE]=0;
        alias i R3;
        i=0;
        while(i<16) do
            if([PROCESS_TABLE+i*16+4]==WAIT_TERMINAL) then
               [PROCESS_TABLE+i*16+4]=READY;
            endif;
            i=i+1;
        endwhile;
        R0=0;
        return;
    endif;
endif;

if(fNum==ACQUIRE_DISK) then
    while([DISK_STATUS_TABLE]==1) do
        [PROCESS_TABLE+currPID*16+4]=WAIT_DISK;
        backup;
        call MOD_5;
        restore;
    endwhile;
    [DISK_STATUS_TABLE]=1;
    [DISK_STATUS_TABLE+4]=currPID;
    return;
endif;

if(fNum==ACQUIRE_SEMAPHORE) then
    alias i R3;
    i=0;
    while(i<MAX_SEM_COUNT) do
        if([SEMAPHORE_TABLE+i*4+1]==0) then
            [SEMAPHORE_TABLE+i*4+0]=currPID;
            [SEMAPHORE_TABLE+i*4+1]=1;
            R0=i;
            return;
        endif;
        i=i+1;
    endwhile;
    R0=-1;
    return;
endif;

if(fNum==RELEASE_SEMAPHORE) then
    [SEMAPHORE_TABLE+R2*4+0]=-1;
    alias i R3;
    i=0;
    while(i<16) do
        if([PROCESS_TABLE+i*16+4]==WAIT_SEMAPHORE && [PROCESS_TABLE+i*16+5]==R2) then
           [PROCESS_TABLE+i*16+4]=READY;
        endif;
    endwhile;   
    [SEMAPHORE_TABLE+i*4+1]=[SEMAPHORE_TABLE+i*4+1]-1;
    return;
endif;

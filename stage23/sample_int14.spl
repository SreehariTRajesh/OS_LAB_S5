alias userSP R0;
userSP=SP;
[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+13]=SP;
SP=[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+11]*512-1;

alias syscallPhysicalAddr R1;
syscallPhysicalAddr=[PTBR+2*((userSP-5)/512)]*512+(userSP-5)%512;
if([syscallPhysicalAddr]==19) then
    [PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+9]=19;
    alias semDesc R2;
    semDesc=[[PTBR+2*((userSP-4)/512)]*512+(userSP-4)%512];
    alias semEntry R3;
    semEntry=[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+11]*512+496+2*semDesc;
    alias ResourceID R4;
    ResourceID=[semEntry];
    alias OpenSemIndex R5;
    OpenSemIndex=[semEntry+1];
    if(semDesc>=0 && semDesc<=7) then
        if(ResourceID!=SEMAPHORE) then
           [[PTBR+2*((userSP-1)/512)]*512+(userSP-1)%512]=-1;
           SP=[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+13];
           [PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+9]=0;   
           ireturn; 
        endif;
        while([SEMAPHORE_TABLE+OpenSemIndex*4]!=[SYSTEM_STATUS_TABLE+1] && [SEMAPHORE_TABLE+OpenSemIndex*4]!=-1) do
            [PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+4]=WAIT_SEMAPHORE;
            [PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+5]=OpenSemIndex;
            [PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+9]=0;
            SP=[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+13];
            [[PTBR+2*((userSP-1)/512)]*512+(userSP-1)%512]=0;
            ireturn;
        endwhile;
    else
        [[PTBR+2*((userSP-1)/512)]*512+(userSP-1)%512]=-1;
        SP=[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+13];
        [PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+9]=0;   
        ireturn;
    endif;
endif;

if([syscallPhysicalAddr]==20) then
    [PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+9]=20;
    alias semDesc R2;
    semDesc=[[PTBR+2*((userSP-4)/512)]*512+(userSP-4)%512];
    alias semEntry R3;
    semEntry=[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+11]*512+496+2*semDesc;
    alias ResourceID R4;
    ResourceID=[semEntry];
    alias OpenSemIndex R5;
    OpenSemIndex=[semEntry+1];
    if(semDesc>=0 && semDesc<=7) then
        if(ResourceID!=SEMAPHORE) then
           [[PTBR+2*((userSP-1)/512)]*512+(userSP-1)%512]=-1;
           SP=[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+13];
           [PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+9]=0;   
           ireturn; 
        endif;
        if([SEMAPHORE_TABLE+4*OpenSemIndex]!=-1) then
            if([SEMAPHORE_TABLE+4*OpenSemIndex]!=[SYSTEM_STATUS_TABLE+1]) then
                [[PTBR+2*((userSP-1)/512)]*512+(userSP-1)%512]=-2;
                SP=[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+13];
                [PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+9]=0;   
                ireturn;             
            endif;
            [SEMAPHORE_TABLE+4*OpenSemIndex]=-1;
            alias i R6;
            i=0;
            while(i<16) do
                if([PROCESS_TABLE+i*16+4]==WAIT_SEMAPHORE && [PROCESS_TABLE+i*16+5]==OpenSemIndex) then
                    [PROCESS_TABLE+i*16+4]=READY;
                endif;
                i=i+1;
            endwhile;
            [[PTBR+2*((userSP-1)/512)]*512+(userSP-1)%512]=0;
            [PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+9]=0;
            SP=[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+13];
            ireturn;
        endif;
    else
        [[PTBR+2*((userSP-1)/512)]*512+(userSP-1)%512]=-1;
        SP=[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+13];
        [PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+9]=0;   
        ireturn;
    endif;
endif;
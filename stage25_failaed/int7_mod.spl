alias userSP R0;
userSP=SP;
[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+13]=SP;
SP=[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+11]*512-1;
alias process_entry R1;
process_entry=PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16;
[process_entry+9]=5;

alias fileDesc R2;
fileDesc=[[PTBR+2*((userSP-4)/512)]*512+(userSP-4)%512];
alias word R3;
word=[[PTBR+2*((userSP-3)/512)]*512+(userSP-3)%512];
alias physicalAddrRetVal R4;
physicalAddrRetVal=[PTBR+2*(userSP-1)/512]*512+(userSP-1)%512;
if(fileDesc==-2) then
    multipush(R0,R1,R2,R3);
    R1=TERMINAL_WRITE;
    R2=[SYSTEM_STATUS_TABLE+1];
    R3=word;
    call MOD_4;
    multipop(R0,R1,R2,R3);
    [physicalAddrRetVal]=0;
    SP=[process_entry+13];
    [process_entry+9]=0;
    ireturn;
endif;
if(fileDesc<0 || fileDesc>7) then
    [physicalAddrRetVal]=-1;
    SP=[process_entry+13];
    [process_entry+9]=0;
    ireturn;
endif;

alias resource_table R5;
resource_table=[process_entry+11]*512+496;

if([resource_table+2*fileDesc]!=FILE) then
    [physicalAddrRetVal]=-1;
    SP=[process_entry+13];
    [process_entry+9]=0;
    ireturn;       
endif;

alias openfileIndex R6;
openfileIndex=[resource_table+2*fileDesc+1];

alias open_file_entry R7;
open_file_entry=OPEN_FILE_TABLE+openfileIndex*4;

alias inode_index R8;
inode_index=[open_file_entry];

alias inode_entry R9;
inode_entry=INODE_TABLE+inode_index*16;

alias root_entry R14;
root_entry=ROOT_FILE+inode_index*8;
if([inode_entry+3]!=[process_entry+3] && [inode_entry+4]==EXCLUSIVE) then
    [physicalAddrRetVal]=-3;
    SP=[process_entry+13];
    [process_entry+9]=0;
    ireturn;       
endif;


multipush(R0,R1,R2,R3,R4,R5,R6,R7,R8,R14);
R1=ACQUIRE_INODE;
R2=inode_index;
R3=[SYSTEM_STATUS_TABLE+1];
call MOD_0;
multipop(R0,R1,R2,R3,R4,R5,R6,R7,R8,R14);

alias lseek_pos R11;
lseek_pos=open_file_entry+2;
if([lseek_pos]==MAX_FILE_SIZE) then
    multipush(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R14);
    R1=RELEASE_INODE;
    R2=inode_index;
    R3=[SYSTEM_STATUS_TABLE+1];
    call MOD_0;
    multipop(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R14);

    [physicalAddrRetVal]=-2;  
    SP=[process_entry+13];
    [process_entry+9]=0;
    ireturn;
endif;


if([lseek_pos]%512==0 && [lseek_pos]==[inode_entry+2]) then
    multipush(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R11,R14);
    R1=GET_FREE_BLOCK;
    call MOD_2;
    R10=R0;
    multipop(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R11,R14);

    if(R10==-1) then
        multipush(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R11,R14);
        R1=RELEASE_INODE;
        R2=inode_index;
        R3=[SYSTEM_STATUS_TABLE+1];
        call MOD_0;
        multipop(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R11,R14);
        
        [physicalAddrRetVal]=-2;  
        SP=[process_entry+13];
        [process_entry+9]=0;
        ireturn;
    endif;
    [inode_entry+[lseek_pos]/512+8]=R10;    
endif;

alias block_num R12;
alias offset R13;

block_num=[inode_entry+8+[lseek_pos]/512];
offset=[lseek_pos]%512;


multipush(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R11,R12,R13,R14);
R1=BUFFERED_WRITE;
R4=word;
R2=block_num;
R3=offset;
call MOD_3;
multipop(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R11,R12,R13,R14);
print "process:";
print [SYSTEM_STATUS_TABLE+1];
print "lseek_pos:";
print [lseek_pos];
print "file size:";
print [inode_entry+2];
if([lseek_pos]==[inode_entry+2]) then
   [inode_entry+2]=[inode_entry+2]+1;
   [root_entry+1]=[root_entry+1]+1;
endif;

[lseek_pos]=[lseek_pos]+1;

multipush(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R11,R12,R13,R14);
R1=RELEASE_INODE;
R2=inode_index;
R3=[SYSTEM_STATUS_TABLE+1];
call MOD_0;
multipop(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R11,R12,R13,R14);

[physicalAddrRetVal]=0;  
SP=[process_entry+13];
[process_entry+9]=0;
ireturn;
alias userSP R0;
userSP=SP;
[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+13]=SP;
SP=[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+11]*512-1;
alias syscallPhysicalAddr R1;
syscallPhysicalAddr=[PTBR+2*((userSP-5)/512)]*512+(userSP-5)%512;
alias fileName R2;
fileName=[[PTBR+2*((userSP-4)/512)]*512+(userSP-4)%512];
alias physicaladdr R3;
physicaladdr=[PTBR+2*((userSP-1)/512)]*512+(userSP-1)%512;
alias process_entry R4;
process_entry = PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16;
if([syscallPhysicalAddr]==1) then
    [process_entry+9]=1;
    alias index R5;
    index=0;
    while(index<60) do
        if([INODE_TABLE+index*16+1]==fileName) then
            [physicaladdr]=-1;
            [process_entry+9]=0;
            SP=[process_entry+13];
            ireturn;
        endif;
        index=index+1;
    endwhile;
    index=0;
    while(index<60) do
        if([INODE_TABLE+index*16+1]==-1) then
            break;
        endif;
        index=index+1;
    endwhile;
    if(index==60) then
        [physicaladdr]=-1;
        [process_entry+9]=0;
        SP=[process_entry+13];
        ireturn;
    endif;
    alias inode_entry R6;
    inode_entry=INODE_TABLE+index*16;
    [inode_entry+0]=DATA;
    [inode_entry+1]=fileName;
    [inode_entry+2]=0;
    [inode_entry+3]=[process_entry+3];
    [inode_entry+4]=[[PTBR+2*((userSP-3)/512)]*512+(userSP-3)%512];
    [inode_entry+8]=-1;
    [inode_entry+9]=-1;
    [inode_entry+10]=-1;
    [inode_entry+11]=-1;

    alias root_entry R7;
    root_entry=ROOT_FILE+index*8;
    [root_entry]=fileName;
    [root_entry+1]=0;
    [root_entry+2]=DATA;
    [root_entry+3]=[inode_entry+3];
    [root_entry+4]=[inode_entry+4];
endif;

if([syscallPhysicalAddr]==4) then
    [process_entry+9]=4;
    alias index R5;
    index=0;
    while(index<60) do
        if([INODE_TABLE+index*16+1]==fileName) then
            break;
        endif;
        index=index+1;
    endwhile;
    alias inode_entry R6;
    inode_entry=INODE_TABLE+index*16;
    if(index==60) then
        [physicaladdr]=0;
        [process_entry+9]=0;
        SP=[process_entry+13];
        ireturn;
    endif;
    if([inode_entry]!=DATA || ([inode_entry+3]!=[process_entry+3] && [inode_entry+3]!=0)) then
        [physicaladdr]=-1;
        [process_entry+9]=0;
        SP=[process_entry+13];
        ireturn;    
    endif;
    multipush(R0,R1,R2,R3,R4,R5,R6);
    R1=ACQUIRE_INODE;
    R2=index;
    R3=[SYSTEM_STATUS_TABLE+1];
    call MOD_0;
    multipop(R0,R1,R2,R3,R4,R5,R6);

    if([FILE_STATUS_TABLE+index*4+1]!=-1) then   
        multipush(R0,R1,R2,R3,R4,R5,R6);
        R1=RELEASE_INODE;
        R2=index;
        R3=[SYSTEM_STATUS_TABLE+1];
        call MOD_0;
        multipop(R0,R1,R2,R3,R4,R5,R6);
        [physicaladdr]=-2;
        [process_entry+9]=0;
        SP=[process_entry+13];
        ireturn;
    endif;
    alias i R7;
    i=8;
    while(i<12) do
        alias blockNum R8;
        blockNum=[inode_entry+i];
        alias j R9;
        j=0;
        while(j<MAX_BUFFER) do
              if(blockNum==[BUFFER_TABLE+4*j] && [BUFFER_TABLE+4*j+1]==1) then
                [BUFFER_TABLE+4*j+1]=0;
              endif;
              j=j+1;
        endwhile;
        multipush(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9);
        R1=RELEASE_BLOCK;
        R2=[inode_entry+i];
        R3=[SYSTEM_STATUS_TABLE+1];
        call MOD_2;
        multipop(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9);
        i=i+1;
    endwhile;
    i=0;
    while(i<16) do
        [inode_entry+i]=-1;
        i=i+1;
    endwhile;
    i=0;
    while(i<5) do
        [ROOT_FILE+index*8+i]=-1;
        i=i+1;
    endwhile;

    multipush(R0,R1,R2,R3,R4,R5,R6,R7);
    R1=RELEASE_INODE;
    R2=index;
    R3=[SYSTEM_STATUS_TABLE+1];
    call MOD_0;
    multipop(R0,R1,R2,R3,R4,R5,R6,R7);
endif;
[physicaladdr]=0;
SP=[process_entry+13];
[process_entry+9]=0;
ireturn;

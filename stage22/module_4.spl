alias fNum R1;
alias currPID R2;
alias arg R3;
if(fNum==TERMINAL_WRITE) then
    multipush(R0,R1,R2,R3);
    fNum=ACQUIRE_TERMINAL;
    currPID=[SYSTEM_STATUS_TABLE+1];
    call MOD_0;
    multipop(R0,R1,R2,R3);
    print R3;
    multipush(R0,R1,R2,R3);
    fNum=RELEASE_TERMINAL;
    currPID=[SYSTEM_STATUS_TABLE+1];
    call MOD_0;
    multipop(R0,R1,R2,R3);
endif;

if(fNum==TERMINAL_READ) then
    multipush(R0,R1,R2,R3);
    R1=ACQUIRE_TERMINAL;
    R2=[SYSTEM_STATUS_TABLE+1];
    call MOD_0;
    multipop(R0,R1,R2,R3);
    read;
    [PROCESS_TABLE+currPID*16+4]=WAIT_TERMINAL;
    backup;
    call MOD_5;
    restore;
    [[PTBR+2*(arg/512)]*512+arg%512]=[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+8];
endif;

if(fNum==DISK_LOAD) then
    backup;
    R1=ACQUIRE_DISK;
    R2=currPID;
    call MOD_0;
    restore;
    [DISK_STATUS_TABLE+1]=0;
    [DISK_STATUS_TABLE+2]=R3;
    [DISK_STATUS_TABLE+3]=R4;
    breakpoint;
    R15=R15+1;
    load(R3,R4);
    [PROCESS_TABLE+currPID*16+4]=WAIT_DISK;
    backup;
    call MOD_5;
    restore;
endif;
return;
alias functionNum R1;
if(functionNum==OPEN) then
   alias i R3;
   i=0;
   while(i<MAX_FILE_NUM) do
        if([INODE_TABLE+i*16+1]==R2) then
            break;
        endif;
        i=i+1;
   endwhile;
   if(i==MAX_FILE_NUM) then
      R0=-1;
      return;
   endif;
   multipush(R0,R1,R2,R3);
   R1=ACQUIRE_INODE;
   R2=i;
   R3=[SYSTEM_STATUS_TABLE+1];
   call MOD_0;
   R10=R0;
   multipop(R0,R1,R2,R3);
   if(R10==-1) then
      R0=-1;
      return;
   endif;
   if([INODE_TABLE+i*16]==EXEC) then
      print "file type exec";
      multipush(R0,R1,R2,R3);
      R1=RELEASE_INODE;
      R2=i;
      R3=[SYSTEM_STATUS_TABLE+1];
      call MOD_0;
      multipop(R0,R1,R2,R3);
   endif;
   alias j R4;
   j=0;
   while(j<MAX_OPENFILE_NUM) do
        if([OPEN_FILE_TABLE+j*8]==-1) then
            break;
        endif;
        j=j+1;
   endwhile;
   if(j==MAX_OPENFILE_NUM) then
      multipush(R0,R1,R2,R3,R4);
      R1=RELEASE_INODE;
      R2=i;
      R3=[SYSTEM_STATUS_TABLE+1];
      call MOD_0;
      multipop(R0,R1,R2,R3,R4);
      R0=-2;
      return;     
   endif;

   if(R2=="root") then
      [OPEN_FILE_TABLE+j*4]=INODE_ROOT;   
   else
        if([FILE_STATUS_TABLE+i*4+1]==-1) then
           [FILE_STATUS_TABLE+i*4+1]=1;
        else
           [FILE_STATUS_TABLE+i*4+1]=[FILE_STATUS_TABLE+i*4+1]+1;
        endif;
        [OPEN_FILE_TABLE+j*4+0]=i;
        [OPEN_FILE_TABLE+j*4+1]=1;
        [OPEN_FILE_TABLE+j*4+2]=0;
   endif;
   multipush(R0,R1,R2,R3,R4);
   R1=RELEASE_INODE;
   R2=i;
   R3=[SYSTEM_STATUS_TABLE+1];
   call MOD_0;
   multipop(R0,R1,R2,R3,R4);
   R0=j;
   return;
endif;

if(functionNum==CLOSE) then
    alias inode_index R3;
    inode_index=[OPEN_FILE_TABLE+R2*4];
    [OPEN_FILE_TABLE+R2*4+1]=[OPEN_FILE_TABLE+R2*4+1]-1;
    if([OPEN_FILE_TABLE+R2*4+1]==0) then
       [OPEN_FILE_TABLE+R2*4+0]=-1;
       [OPEN_FILE_TABLE+R2*4+1]=-1;
       [OPEN_FILE_TABLE+R2*4+2]=-1;
       if([INODE_TABLE+inode_index*16]!=ROOT) then
          [FILE_STATUS_TABLE+inode_index*4+1]=[FILE_STATUS_TABLE+inode_index*4+1]-1;
       endif;
       if([FILE_STATUS_TABLE+inode_index*4+1]==0) then
          [FILE_STATUS_TABLE+inode_index*4+1]=-1;
       endif;
    endif;
    
    return;
endif;

alias disk_block_num R2;
alias offset R3;
alias membuff_address R4;
if(functionNum==BUFFERED_READ) then
   alias buff_num R5;
   buff_num=disk_block_num%4;
   
   multipush(R0,R1,R2,R3,R4,R5);
   R1=ACQUIRE_BUFFER;
   R2=buff_num;
   R3=[SYSTEM_STATUS_TABLE+1];
   call MOD_0;
   multipop(R0,R1,R2,R3,R4,R5);

   if([BUFFER_TABLE+buff_num*4]!=disk_block_num) then
      if([BUFFER_TABLE+buff_num*4+1]==1) then
          multipush(R0,R1,R2,R3,R4,R5);
          R1=DISK_STORE;
          R2=[SYSTEM_STATUS_TABLE+1];
          R3=71+buff_num;
          R4=[BUFFER_TABLE+buff_num*4];
          call MOD_3;
          multipop(R0,R1,R2,R3,R4,R5);
         [BUFFER_TABLE+buff_num*4+1]=0;
      endif;   
      multipush(R0,R1,R2,R3,R4,R5);
      R1=DISK_LOAD;
      R4=disk_block_num;
      R2=[SYSTEM_STATUS_TABLE+1];
      R3=71+buff_num;
      call MOD_4;
      multipop(R0,R1,R2,R3,R4,R5);
      [BUFFER_TABLE+buff_num*4]=disk_block_num;   
   endif;
   [[PTBR+2*((membuff_address/512))]*512+membuff_address%512]=[(71+buff_num)*512+offset];   
   multipush(R0,R1,R2,R3,R4,R5);
   R1=RELEASE_BUFFER;
   R2=buff_num;
   R3=[SYSTEM_STATUS_TABLE+1];
   call MOD_0;
   multipop(R0,R1,R2,R3,R4,R5);
   return;
endif;
alias fNum R1;
alias currPID R2;
alias arg R3;
if(fNum==TERMINAL_WRITE) then
    multipush(R0,R1,R2,R3);
    fNum=ACQUIRE_TERMINAL;
    call MOD_0;
    multipop(R0,R1,R2,R3);

    print R3;

    multipush(R0,R1,R2,R3);
    fNum=RELEASE_TERMINAL;
    call MOD_0;
    multipop(R0,R1,R2,R3);
    return;
endif;

if(fNum==TERMINAL_READ) then
    multipush(R0,R1,R2,R3);
    R1=ACQUIRE_TERMINAL;
    call MOD_0;
    multipop(R0,R1,R2,R3);

    read;

    [PROCESS_TABLE+currPID*16+4]=WAIT_TERMINAL;

    backup;
    call MOD_5;
    restore;
    [arg]=[PROCESS_TABLE+currPID*16+8];
    return;
endif;

if(fNum==DISK_LOAD) then
    multipush(R0,R1,R2,R3,R4);
    R1=ACQUIRE_DISK;
    R2=currPID;
    call MOD_0;
    multipop(R0,R1,R2,R3,R4);

    [DISK_STATUS_TABLE+1]=0;
    [DISK_STATUS_TABLE+2]=R3;
    [DISK_STATUS_TABLE+3]=R4;
    load(R3,R4);
    [PROCESS_TABLE+currPID*16+4]=WAIT_DISK;
    backup;
    call MOD_5;
    restore;
    return;
endif;

if(fNum==DISK_STORE) then
    if(R4==-1) then
       return;
    endif;
    multipush(R0,R1,R2,R3,R4);
    R1=ACQUIRE_DISK;
    call MOD_0;
    multipop(R0,R1,R2,R3,R4);

    [DISK_STATUS_TABLE+1]=1;
    [DISK_STATUS_TABLE+2]=R3;
    [DISK_STATUS_TABLE+3]=R4;
    store(R3,R4);

    [PROCESS_TABLE+R2*16+4]=WAIT_DISK;
    backup;
    call MOD_5;
    restore;
    return;
endif;
